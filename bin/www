#!/usr/bin/env node

/**
 * Module dependencies.
 */

// const { error } = require('console');
var app = require('../app');
var debug = require('debug')('npm-server:server');
const fs = require('fs');
var https = require('https')
var http = require('http')
var path = require('path')


var key = fs.readFileSync(path.join(__dirname , '../certs/sgutkbsort.id.vn/private.key'));
var cert = fs.readFileSync(path.join(__dirname , '../certs/sgutkbsort.id.vn/certificate.crt'));
var ca = fs.readFileSync(path.join(__dirname ,'../certs/sgutkbsort.id.vn/ca_bundle.crt'));
var options = {
  ca: ca,
  key: key,
  cert: cert
};

var server_https = https.createServer(options, app);
var server_http = http.createServer(app);

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var port = app.get('port');

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

server_https.on('error', onError);
server_http.on('error', onError)

server_https.listen(443, () => {
  console.log(`server start in https://localhost:443`)
});

server_http.listen(80, () => {
  console.log(`server start in http://localhost:80`)
})