#!/usr/bin/env node

/**
 * Module dependencies.
 */

// const { error } = require('console');
const app = require('../app');
const debug = require('debug')('npm-server:server');
const fs = require('fs');
const https = require('https')
const path = require('path')
const { Server } = require("socket.io");

var key = fs.readFileSync(path.join(__dirname , '../certs/tkbsgusort.id.vn/private.key'));
var cert = fs.readFileSync(path.join(__dirname , '../certs/tkbsgusort.id.vn/certificate.crt'));
var ca = fs.readFileSync(path.join(__dirname ,'../certs/tkbsgusort.id.vn/ca_bundle.crt'));
var options = {
  ca: ca,
  key: key,
  cert: cert
};

const server_https = https.createServer(options, app);
const io = new Server(server_https)

io.engine.use(app.get('session'));

function onError(error, port) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

var https_port = app.get('https_port');

server_https.on('error', (e) => onError(e, https_port));

io.on('connection', (socket) => {

  socket.on('add', function() {
    console.log(arguments)
  })

  socket.on('disconnect', () => {
    console.log('user disconnected');
  });

  console.log('ok')
});

server_https.listen(https_port, () => {
  console.log(`server start in https://localhost:${https_port}`);
});